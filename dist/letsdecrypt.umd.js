(function(p,n){typeof exports=="object"&&typeof module<"u"?n(exports,require("buffer")):typeof define=="function"&&define.amd?define(["exports","buffer"],n):(p=typeof globalThis<"u"?globalThis:p||self,n(p.letsdecrypt={},p.buffer))})(this,function(p,n){"use strict";const C="AES-GCM",O="SHA-256",v=async e=>{const t=new TextEncoder,r=await crypto.subtle.importKey("raw",t.encode(e),"PBKDF2",!1,["deriveBits","deriveKey"]);return crypto.subtle.deriveKey({name:"PBKDF2",salt:t.encode("salt"),iterations:1e5,hash:O},r,{name:C,length:256},!0,["encrypt","decrypt"])},B=async(e,t,r)=>({wrappedKey:n.Buffer.from(await crypto.subtle.exportKey("spki",e)).toString("base64"),iv:n.Buffer.from(crypto.getRandomValues(new Uint8Array(12))).toString("base64"),format:"spki",algorithm:t,namedCurve:r}),T=async(e,t,r,a)=>{const c="jwk",o=await crypto.subtle.exportKey(c,e),s=new TextEncoder().encode(JSON.stringify(o)),y=await v(t),i=crypto.getRandomValues(new Uint8Array(12)),u=await crypto.subtle.encrypt({name:C,iv:i},y,s);return{wrappedKey:n.Buffer.from(u).toString("base64"),iv:n.Buffer.from(i).toString("base64"),algorithm:r,format:c,namedCurve:a,protected:t.length>0?!0:void 0}},P=async(e,t="spki")=>{const r=await crypto.subtle.exportKey(t,e),a=await crypto.subtle.digest(O,r);return n.Buffer.from(a).toString("hex")},d="RSA-OAEP",l="AES-GCM",A="SHA-256",k=e=>({name:d,modulusLength:(e==null?void 0:e.rsaModulusLength)||2048,publicExponent:new Uint8Array([1,0,1]),hash:A}),w={async generateKeyPair(e){const t=k(e),r=await crypto.subtle.generateKey(t,!0,["encrypt","decrypt"]),a=await T(r.privateKey,(e==null?void 0:e.passphrase)??"",t.name);return{publicKey:await B(r.publicKey,t.name),privateKey:a}},async importPublicKey(e){if(e instanceof CryptoKey)return e;const t=typeof e=="string"?JSON.parse(e):e,{wrappedKey:r,algorithm:a,format:c}=t,o={name:a,hash:A},s=n.Buffer.from(r,"base64");return await crypto.subtle.importKey(c,s,o,!0,["encrypt"])},async importPrivateKey(e,t){if(e instanceof CryptoKey)return e;const r=typeof e=="string"?JSON.parse(e):e,a=await v(t),c=n.Buffer.from(r.wrappedKey,"base64"),o=n.Buffer.from(r.iv,"base64"),s=await crypto.subtle.decrypt({name:l,iv:o},a,c),y=r.format||"pkcs8",i=y==="jwk"?JSON.parse(new TextDecoder().decode(s)):s;return crypto.subtle.importKey(y,i,{name:d,hash:A},!0,["decrypt"])},async encrypt(e,t){t=await this.importPublicKey(t);const r=await crypto.subtle.generateKey({name:l,length:256},!0,["encrypt","decrypt"]),a=crypto.getRandomValues(new Uint8Array(12)),c=new TextEncoder().encode(e),o=await crypto.subtle.encrypt({name:l,iv:a},r,c),s=await crypto.subtle.exportKey("raw",r),y=await crypto.subtle.encrypt({name:d},t,s),i={algorithm:d,keyHash:await P(t),iv:n.Buffer.from(a).toString("base64"),symmetricKey:n.Buffer.from(y).toString("base64")};return{encryptedData:n.Buffer.from(o).toString("base64"),metadata:i}},async decrypt(e,t,r){const a=typeof e=="string"?JSON.parse(e):e;t=await this.importPrivateKey(t,r??"");const c=a.metadata,o=n.Buffer.from(c.symmetricKey,"base64"),s=await crypto.subtle.decrypt({name:d},t,o),y=await crypto.subtle.importKey("raw",s,{name:l,length:256},!1,["decrypt"]),i=n.Buffer.from(a.encryptedData,"base64"),u=n.Buffer.from(c.iv,"base64"),U=await crypto.subtle.decrypt({name:l,iv:u},y,i);return new TextDecoder().decode(U)}},m="ECDH",R="P-256",f="AES-GCM",x=e=>({name:m,namedCurve:(e==null?void 0:e.eccCurve)||R}),g={async generateKeyPair(e){const t=x(e),r=await crypto.subtle.generateKey(t,!0,["deriveKey","deriveBits"]),a=await T(r.privateKey,(e==null?void 0:e.passphrase)??"",t.name,t.namedCurve);return{publicKey:await B(r.publicKey,t.name,t.namedCurve),privateKey:a}},async importPrivateKey(e,t){if(e instanceof CryptoKey)return e;const r=typeof e=="string"?JSON.parse(e):e,a=await v(t),c=n.Buffer.from(r.wrappedKey,"base64"),o=n.Buffer.from(r.iv,"base64"),s=await crypto.subtle.decrypt({name:f,iv:o},a,c),y=r.format||(r.algorithm===m?"jwk":"pkcs8"),i=y==="jwk"?JSON.parse(new TextDecoder().decode(s)):s,u={name:m,namedCurve:r.namedCurve};return crypto.subtle.importKey(y,i,u,!0,["deriveKey","deriveBits"])},async importPublicKey(e){if(e instanceof CryptoKey)return e;const t=typeof e=="string"?JSON.parse(e):e,{wrappedKey:r,algorithm:a,format:c,namedCurve:o}=t,s={name:a,namedCurve:o},y=n.Buffer.from(r,"base64");return await crypto.subtle.importKey(c,y,s,!0,[])},async encrypt(e,t){t=await this.importPublicKey(t);const r=t.algorithm,a=await crypto.subtle.generateKey({name:m,namedCurve:r.namedCurve},!0,["deriveKey","deriveBits"]),c=await crypto.subtle.deriveKey({name:m,public:t},a.privateKey,{name:f,length:256},!1,["encrypt"]),o=crypto.getRandomValues(new Uint8Array(12)),s=new TextEncoder().encode(e),y=await crypto.subtle.encrypt({name:f,iv:o},c,s),i=await crypto.subtle.exportKey("spki",a.publicKey),u={algorithm:m,keyHash:await P(t),iv:n.Buffer.from(o).toString("base64"),symmetricKey:"",publicKey:n.Buffer.from(i).toString("base64"),namedCurve:r.namedCurve};return{encryptedData:n.Buffer.from(y).toString("base64"),metadata:u}},async decrypt(e,t,r){const a=typeof e=="string"?JSON.parse(e):e;t=await this.importPrivateKey(t,r??"");const c=await crypto.subtle.importKey("spki",n.Buffer.from(a.metadata.publicKey,"base64"),{name:m,namedCurve:a.metadata.namedCurve??R},!0,[]),o=await crypto.subtle.deriveKey({name:m,public:c},t,{name:f,length:256},!1,["decrypt"]),s=n.Buffer.from(a.encryptedData,"base64"),y=n.Buffer.from(a.metadata.iv,"base64"),i=await crypto.subtle.decrypt({name:f,iv:y},o,s);return new TextDecoder().decode(i)}},h="AES-CTR",H=()=>({name:h,length:256}),S={async generateKeyPair(){const e=H(),t=await crypto.subtle.generateKey(e,!0,["encrypt","decrypt"]),r={wrappedKey:n.Buffer.from(JSON.stringify(await crypto.subtle.exportKey("jwk",t))).toString("base64"),algorithm:h,format:"jwk"};return{publicKey:r,privateKey:r}},async importPublicKey(e){return this.importPrivateKey(e,"")},async importPrivateKey(e){if(e instanceof CryptoKey)return e;const t=typeof e=="string"?JSON.parse(e):e,{wrappedKey:r,format:a}=t,c={name:h,length:256};return await crypto.subtle.importKey(a,JSON.parse(n.Buffer.from(r,"base64").toString("ascii")),c,!0,["encrypt","decrypt"])},async encrypt(e,t){t=await this.importPublicKey(t);const r=new TextEncoder().encode(e),a={name:"AES-CTR",counter:new Uint8Array(16),length:16*8},c=await crypto.subtle.encrypt(a,t,r),o={algorithm:h,keyHash:await P(t,"raw")};return{encryptedData:n.Buffer.from(c).toString("base64"),metadata:o}},async decrypt(e,t,r){const a=typeof e=="string"?JSON.parse(e):e;t=await this.importPrivateKey(t,r??"");const c={name:"AES-CTR",counter:new Uint8Array(16),length:16*8};return new TextDecoder("utf-8").decode(await crypto.subtle.decrypt(c,t,n.Buffer.from(a.encryptedData,"base64")))}};class E extends Error{constructor(t,...r){super(...r),this.name="UnhandledMatchError",this.message=`Unhandled match value of type ${typeof t} - ${t}`,Error.captureStackTrace(this,E)}}function D(e){throw e}const b=Symbol(),M=e=>D(new E(e)),K=(e,t,r=M)=>{const a=new Map,c=Array.isArray(t)?t:Object.entries(t).map(([s,y])=>[s,y]);for(const[...s]of c){const y=s.pop();for(const i of s.flat())a.has(i)||a.set(i,y)}a.has(b)||a.set(b,r);const o=a.get(e)??a.get(b);return typeof o=="function"?o(e):o};K.default=b;const N=async e=>{let t;if(typeof e=="string")t=JSON.parse(e);else if(typeof e=="object")t=e;else return e;return K(t.algorithm,[["RSA-OAEP",()=>w.importPublicKey(t)],["ECDH",()=>g.importPublicKey(t)],["AES-CTR",()=>S.importPublicKey(t)]])},J=async e=>K((e==null?void 0:e.algorithm)??"RSA",[["RSA",()=>w.generateKeyPair(e)],["ECC",()=>g.generateKeyPair(e)],["AES",()=>S.generateKeyPair(e)]]),G=async e=>({publicKey:JSON.stringify(e.publicKey),privateKey:JSON.stringify(e.privateKey)}),L=async(e,t)=>{const r=await N(t);return K(r.algorithm.name,[["RSA-OAEP",async()=>w.encrypt(e,r)],["ECDH",async()=>g.encrypt(e,r)],["AES-CTR",async()=>S.encrypt(e,r)]])},j=async(e,t,r)=>(typeof e=="string"&&(e=JSON.parse(e)),K(e.metadata.algorithm,[["RSA-OAEP",async()=>w.decrypt(e,t,r)],["ECDH",async()=>g.decrypt(e,t,r)],["AES-CTR",async()=>S.decrypt(e,t,r)]]));p.decrypt=j,p.encrypt=L,p.exportKeyPair=G,p.generateKeyPair=J,Object.defineProperty(p,Symbol.toStringTag,{value:"Module"})});
